package main

import (
	"context"
	"fmt"
	"log"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"

	// 请将mycontract替换为您生成的Go合约包名称
	mycontract "./mycontract"
)

func main() {
	client, err := ethclient.Dial("https://mainnet.infura.io/v3/YOUR_INFURA_API_KEY")
	if err != nil {
		log.Fatalf("Failed to connect to Ethereum client: %v", err)
	}

	// 合约地址和用户地址
	contractAddress := common.HexToAddress("YOUR_CONTRACT_ADDRESS")
	userAddress := common.HexToAddress("YOUR_USER_ADDRESS")

	// 初始化合约实例
	instance, err := mycontract.NewMySecuredContractWithAdminTransferRecord(contractAddress, client)
	if err != nil {
		log.Fatalf("Failed to instantiate contract: %v", err)
	}

	// 创建授权事务
	auth, err := bind.NewTransactorWithChainID(strings.NewReader("YOUR_PRIVATE_KEY"), big.NewInt(1))
	if err != nil {
		log.Fatalf("Failed to create authorized transactor: %v", err)
	}

	// 调用存款函数
	tx, err := instance.Deposit(auth, big.NewInt(1000000000000000000)) // 存入1个代币
	if err != nil {
		log.Fatalf("Failed to call deposit function: %v", err)
	}
	fmt.Printf("Deposited successfully, transaction hash: %s\n", tx.Hash().Hex())

	// 调用管理员转账函数
	to := common.HexToAddress("RECIPIENT_ADDRESS")
	tx, err = instance.AdminTransfer(auth, to, big.NewInt(1000000000000000000)) // 转账1个代币
	if err != nil {
		log.Fatalf("Failed to call adminTransfer function: %v", err)
	}
	fmt.Printf("AdminTransfer successfully, transaction hash: %s\n", tx.Hash().Hex())

	// 查询存款金额
	depositAmount, err := instance.GetDepositAmount(&bind.CallOpts{}, userAddress)
	if err != nil {
		log.Fatalf("Failed to get deposit amount: %v", err)
	}
	fmt.Printf("User deposit amount: %s\n", depositAmount.String())

	// 查询存款操作次数
	depositNonce, err := instance.GetDepositNonce(&bind.CallOpts{}, userAddress)
	if err != nil {
		log.Fatalf("Failed to get deposit nonce: %v", err)
	}
	fmt.Printf("User deposit nonce: %d\n", depositNonce)

	// 查询管理员转账金额
	adminTransferAmount, err := instance.GetAdminTransferAmount(&bind.CallOpts{}, auth.From)
	if err != nil {
		log.Fatalf("Failed to get admin transfer amount: %v", err)
	}
	fmt.Printf("Admin transfer amount: %s\n", adminTransferAmount.String())

	// 查询管理员转账操作次数
	adminTransferNonce, err := instance.GetAdminTransferNonce(&bind.CallOpts{}, auth.From)
	if err != nil {
		log.Fatalf("Failed to get admin transfer nonce: %v", err)
	}
	fmt.Printf("Admin transfer nonce: %d\n", adminTransferNonce)
}
